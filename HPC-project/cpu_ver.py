# -*- coding: utf-8 -*-
"""CPU ver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h4y6vMdNt4sy4mRHdnQ9zTR_MS9Bs_-l
"""

!git clone https://github.com/Hotrung2311/publicfolder.git

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import time
import math

root = mpimg.imread('publicfolder/000.png')
imgplot = plt.imshow(root)
plt.show()

def calV(src):
  dst = np.zeros((src.shape[0],src.shape[1]))
  for tidx in range(src.shape[0]):
    for tidy in range(src.shape[1]):
      R = src[tidx, tidy, 2]/255
      G = src[tidx, tidy, 1]/255
      B = src[tidx, tidy, 0]/255
      
      dst[tidx][tidy]= max(R, G, B)
  return dst

def calDS(cMat,vMat,fw,a,b,c,d):
  windowSum = 0
  windowSD = 0
  windowColor = 0

  f1 = a
  t1 = b
  f2 = c
  t2 = d

  if a < 0: 
    f1 = 0
  if b > len(cMat)-1:
    t1 = len(cMat)-1
  if c < 0:
    f2 = 0
  if d > len(cMat[0])-1:
    t2 = len(cMat[0])-1

  for i in range(f1,t1+1):
    for j in range(f2,t2+1):
        windowSum += vMat[i][j]
        windowColor += cMat[i][j]
  windowMean = windowSum/((fw+1)*(fw+1))

  for i in range(f1,t1+1):
    for j in range(f2,t2+1):
        windowSD += (vMat[i][j] - windowMean)*(vMat[i][j] - windowMean)/((fw+1)*(fw+1))
        
  result = math.sqrt(windowSD)
  windowMeanColor = windowColor/((fw+1)*(fw+1))
  return result, windowMeanColor


def kuwahara(cmat, vmat, w):
  dst = np.zeros((len(cmat),len(cmat[0])))
  for tidx in range(len(cmat)):
    for tidy in range(len(cmat[0])):
      dsA, colorA = calDS(cmat, vmat, w, tidx - w, tidx, tidy - w, tidy)
      dsB, colorB = calDS(cmat, vmat, w, tidx, tidx + w, tidy - w, tidy)
      dsC, colorC = calDS(cmat, vmat, w, tidx - w, tidx, tidy, tidy + w)
      dsD, colorD = calDS(cmat, vmat, w, tidx, tidx + w, tidy, tidy + w)

      minWl = min(dsA, dsB, dsC, dsD)
      if minWl == dsA:
        dst[tidx, tidy] = colorA
      if minWl == dsB:
        dst[tidx, tidy] = colorB
      if minWl == dsC:
        dst[tidx, tidy] = colorC
      if minWl == dsD:
        dst[tidx, tidy] = colorD
  return dst

img = root.copy()

v_mat = calV(img)

blue_channel = img[:,:,0]
green_channel = img[:,:,1]
red_channel = img[:,:,2]

w = 5

blue_mat = kuwahara(blue_channel, v_mat, w)
green_mat = kuwahara(green_channel, v_mat, w)
red_mat = kuwahara(red_channel, v_mat, w)

combine_img = np.dstack((blue_mat,green_mat,red_mat))
imgplot = plt.imshow(img)
plt.show()
imgplot = plt.imshow(combine_img)
plt.show()