# -*- coding: utf-8 -*-
"""hpc1-labwork6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNBKP--KmXk7k0ynB81E1ZOmlZlOkKmv
"""

from google.colab import drive
drive.mount('/content/gdrive')

from numba import cuda
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import time
import math

root = mpimg.imread('/content/gdrive/My Drive/Colab Notebooks/tv.jpg')
root1 = mpimg.imread('/content/gdrive/My Drive/Colab Notebooks/hd1.JPEG')
root2 = mpimg.imread('/content/gdrive/My Drive/Colab Notebooks/hd2.JPEG')

imgplot = plt.imshow(root)
plt.show()

img2 = root.copy()
devdata2 = cuda.to_device(img2)
devOutput2 = cuda.device_array(np.shape(img2),np.uint8)

@cuda.jit 
def binarization(src, dst): 
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  tidy = cuda.threadIdx.y + cuda.blockIdx.y * cuda.blockDim.y
  g = np.uint8(src[tidx, tidy, 0]/3 + src[tidx, tidy, 1]/3 + src[tidx, tidy, 2]/3)
  if g > 100:
    dst[tidx, tidy, 0] = dst[tidx, tidy, 1] = dst[tidx, tidy, 2] = 255
  else:
    dst[tidx, tidy, 0] = dst[tidx, tidy, 1] = dst[tidx, tidy, 2] = 0


t3 = time.time()
blockSize = (8,8)
gridSize = (math.ceil(img2.shape[0] / blockSize[0]), math.ceil(img2.shape[1] / blockSize[1]))
binarization[gridSize, blockSize](devdata2, devOutput2)
t4 = time.time()
exe_time = t4-t3

resimg2 = devOutput2.copy_to_host()

print("Execute time (s): " + str(exe_time))
imgplot = plt.imshow(resimg2)
plt.show()

imgplot = plt.imshow(root)
plt.show()

img3 = root.copy()
devdata3 = cuda.to_device(img3)
devOutput3 = cuda.device_array(np.shape(img3),np.uint8)

@cuda.jit 
def brighter(src, dst, incr): 
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  tidy = cuda.threadIdx.y + cuda.blockIdx.y * cuda.blockDim.y
  #g = np.uint8(src[tidx, tidy, 0]/3 + src[tidx, tidy, 1]/3 + src[tidx, tidy, 2]/3)
  if np.uint8(src[tidx, tidy, 0]) + np.uint8(incr) < 255:
    dst[tidx, tidy, 0] = np.uint8(src[tidx, tidy, 0]) + np.uint8(incr)
  if np.uint8(src[tidx, tidy, 1]) + np.uint8(incr) < 255:
    dst[tidx, tidy, 1] = np.uint8(src[tidx, tidy, 1]) + np.uint8(incr)
  if np.uint8(src[tidx, tidy, 2]) + np.uint8(incr) < 255:
    dst[tidx, tidy, 2] = np.uint8(src[tidx, tidy, 2]) + np.uint8(incr)

t3 = time.time()
blockSize = (8,8)
gridSize = (math.ceil(img3.shape[0] / blockSize[0]), math.ceil(img3.shape[1] / blockSize[1]))
brighter[gridSize, blockSize](devdata3, devOutput3, 10)
t4 = time.time()
exe_time = t4-t3

resimg3 = devOutput3.copy_to_host()

print("Execute time (s): " + str(exe_time))
imgplot = plt.imshow(resimg3)
plt.show()