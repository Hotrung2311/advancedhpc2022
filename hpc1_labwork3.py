# -*- coding: utf-8 -*-
"""hpc1-labwork3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P60u6mVFep8L_PS9ae6y1K0V_LQbHqD1
"""

from google.colab import drive
drive.mount('/content/gdrive')

from numba import cuda
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import time

root = mpimg.imread('/content/gdrive/My Drive/Colab Notebooks/tv.jpg')
imgplot = plt.imshow(root)
plt.show()

h, w, c = root.shape
pixelCount = h*w

img1 = root.copy()
#img1 = img1.reshape(pixelCount, 3)
'''
def gray_scale(img):
  for i in img:
    gray = i[0]/3 + i[1]/3 + i[2]/3
    i[0] = gray
    i[1] = gray
    i[2] = gray
  return img
'''

def gray_scale(img):
  h1, w1, c1 = img.shape
  print(h1)
  print(w1)
  for i in range(h1):
    for j in range(w1):
      gray = img[i][j][0]/3 + img[i][j][1]/3 + img[i][j][2]/3
      img[i][j][0] = gray
      img[i][j][1] = gray
      img[i][j][2] = gray
  return(img)

t1 = time.time()
img1 = gray_scale(img1)
#img1 = np.reshape(img1, (h,w,3))
t2 = time.time()

exe_time = t2-t1
print("Execute time (s): " + str(exe_time))
imgplot = plt.imshow(img1)
plt.show()

#img2 = root.copy().reshape(pixelCount, 3)
img2 = root.copy()
devdata2 = cuda.to_device(img2)
devOutput2 = cuda.device_array(np.shape(img2),np.uint8)

@cuda.jit 
def grayscale(src, dst): 
  # where are we in the input? 
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  tidy = cuda.threadIdx.y + cuda.blockIdx.y * cuda.blockDim.y
  #g = np.uint8(src[tidx, 0]/3 + src[tidx, 1]/3 + src[tidx, 2]/ 3) 
  g = np.uint8(src[tidx, tidy, 0]/3 + src[tidx, tidy, 1]/3 + src[tidx, tidy, 2]/3)
  dst[tidx, tidy, 0] = dst[tidx, tidy, 1] = dst[tidx, tidy, 2] = g


t3 = time.time()
blockSize = (8,8)
gridSize = (img2.shape[0] // blockSize[0], img2.shape[1] // blockSize[1])
grayscale[gridSize, blockSize](devdata2, devOutput2)
t4 = time.time()

exe_time = t4-t3
#resimg2 = devOutput2.copy_to_host().reshape(h,w,3)
resimg2 = devOutput2.copy_to_host()

print("Execute time (s): " + str(exe_time))
imgplot = plt.imshow(resimg2)
plt.show()